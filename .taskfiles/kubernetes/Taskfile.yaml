---
version: '3'

tasks:

  browse-pvc:
    desc: Mount a PVC to an temp container [NS={{.NS}}] [CLAIM=required]
    interactive: true
    cmd: kubectl browse-pvc --namespace {{.NS}} --image docker.io/library/alpine:latest {{.CLAIM}}
    vars:
      NS: '{{.NS | default "default"}}'
    requires:
      vars: [CLAIM]
    preconditions:
      - kubectl --namespace {{.NS}} get persistentvolumeclaims {{.CLAIM}}
      - kubectl browse-pvc --version
      - which kubectl

  node-shell:
    desc: Open a shell to a node [NS={{.NS}}] [NODE=required]
    interactive: true
    cmd: kubectl node-shell -n {{.NS}} -x {{.NODE}}
    vars:
      NS: '{{.NS | default "kube-system"}}'
    requires:
      vars: [NODE]
    preconditions:
      - kubectl get nodes {{.NODE}}
      - kubectl node-shell --version
      - which kubectl

  sync-secrets:
    desc: Force sync all ExternalSecrets (and fix 1Password Connect if needed)
    cmds:
      - echo "üîç Checking 1Password Connect status..."
      - |
        if ! kubectl get clustersecretstore onepassword -o jsonpath='{.status.conditions[0].status}' | grep -q "True"; then
          echo "‚ùå 1Password Connect not working, fixing..."
          cat {{.BOOTSTRAP_DIR}}/secrets.yaml.tpl | op inject | kubectl apply -f -
          kubectl delete pod -l app.kubernetes.io/name=onepassword -n external-secrets
          echo "‚è≥ Waiting for 1Password Connect to restart..."
          kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=onepassword -n external-secrets --timeout=60s
        else
          echo "‚úÖ 1Password Connect is healthy"
        fi
      - echo "üîÑ Force syncing all ExternalSecrets..."
      - for: { var: SECRETS, split: "\n" }
        cmd: kubectl --namespace {{splitList "," .ITEM | first}} annotate externalsecret {{splitList "," .ITEM | last}} force-sync="{{now | unixEpoch}}" --overwrite
      - echo "‚úÖ Secret sync complete"
    vars:
      SECRETS:
        sh: kubectl get externalsecret --all-namespaces --no-headers --output=jsonpath='{range .items[*]}{.metadata.namespace},{.metadata.name}{"\n"}{end}'
    preconditions:
      - op user get --me
      - test -f {{.BOOTSTRAP_DIR}}/secrets.yaml.tpl
      - which kubectl op

  cleanse-pods:
    desc: Cleanse pods with a Failed/Pending/Succeeded phase
    cmds:
      - for:
          matrix:
            PHASE: [Failed, Pending, Succeeded]
        cmd: kubectl delete pods --all-namespaces --field-selector status.phase={{.ITEM.PHASE}} --ignore-not-found=true
    preconditions:
      - which kubectl

  reconcile:
    desc: Force Flux reconciliation to pull latest Git changes
    cmds:
      - echo "üîÑ Reconciling Git source..."
      - flux reconcile source git flux-system -n flux-system
      - echo "üîÑ Reconciling cluster applications..."
      - flux reconcile kustomization cluster-apps -n flux-system
      - echo "‚úÖ Flux reconciliation complete"
    preconditions:
      - which flux

  # https://docs.github.com/en/enterprise-cloud@latest/actions/hosting-your-own-runners/managing-self-hosted-runners-with-actions-runner-controller/deploying-runner-scale-sets-with-actions-runner-controller#upgrading-arc
  upgrade-arc:
    desc: Upgrade the ARC
    cmds:
      - helm -n actions-runner-system uninstall home-ops-runner
      - helm -n actions-runner-system uninstall actions-runner-controller
      - sleep 5
      - flux -n actions-runner-system reconcile hr actions-runner-controller
      - flux -n actions-runner-system reconcile hr home-ops-runner
    preconditions:
      - which flux helm
