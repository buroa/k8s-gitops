---
version: '3'

tasks:

  talos:
    desc: Bootstrap Talos
    prompt: Bootstrap Talos ...?
    cmds:
      - until talosctl --nodes {{.TALOS_CONTROLLER}} bootstrap; do sleep 10; done
      - talosctl kubeconfig --nodes {{.TALOS_CONTROLLER}} --force {{.KUBERNETES_DIR}}
    vars:
      TALOS_CONTROLLER:
        sh: talosctl config info --output json | jq --raw-output '.endpoints[]' | shuf -n 1
    preconditions:
      - talosctl config info
      - which talosctl

  apps:
    desc: Bootstrap Kubernetes Apps [MODEL=SAMSUNG MZQL23T8HCLS-00A07]
    prompt: Bootstrap Kubernetes Apps ...?
    cmds:
      - for: { var: NODES }
        task: wipe-rook
        vars:
          MODEL: '{{.MODEL}}'
          NODE: '{{.ITEM}}'
      - until kubectl wait nodes --for=condition=Ready=False --all --timeout=10m; do sleep 5; done
      - op inject --in-file {{.KUBERNETES_DIR}}/bootstrap/templates/resources.yaml.tpl | kubectl apply --server-side --filename -
      - helmfile --quiet --file {{.KUBERNETES_DIR}}/bootstrap/helmfile.yaml apply --skip-diff-on-install --suppress-diff
    vars:
      MODEL: '{{.MODEL | default "SAMSUNG MZQL23T8HCLS-00A07"}}'
      NODES:
        sh: talosctl config info --output json | jq --join-output '[.nodes[]] | join(" ")'
    env:
      VAULT: K8s
    preconditions:
      - op user get --me
      - talosctl config info
      - test -f {{.KUBERNETES_DIR}}/bootstrap/helmfile.yaml
      - test -f {{.KUBERNETES_DIR}}/bootstrap/templates/resources.yaml.tpl
      - which jq helmfile kubectl op talosctl

  wipe-rook:
    internal: true
    cmd: talosctl -n {{.NODE}} wipe disk {{.BLOCK}}
    vars:
      BLOCK:
        sh: talosctl -n {{.NODE}} get disks -o json | jq --raw-output 'select(.spec.model == "{{.MODEL}}") | .metadata.id'
    requires:
      vars: [MODEL, NODE]
    preconditions:
      - talosctl config info
      - talosctl --nodes {{.NODE}} get machineconfig
      - which talosctl jq
