---
version: '3'

tasks:

  apply-cluster:
    desc: Apply Talos config across the whole cluster
    prompt: Apply Talos config across the whole cluster ... continue?
    dir: '{{.TALOS_DIR}}'
    cmd: talhelper gencommand apply | bash
    preconditions:
      - talosctl config info
      - which talhelper

  upgrade-node:
    desc: Upgrade Talos on a single node [NODE=required]
    prompt: Upgrade Talos on {{.NODE}} to {{.TALOS_VERSION}} ... continue?
    cmds:
      - talosctl --nodes {{.NODE}} upgrade --image=factory.talos.dev/installer/{{.TALOS_SCHEMATIC_ID}}:{{.TALOS_VERSION}}
      - talosctl --nodes {{.NODE}} health
    vars:
      NODE: '{{.NODE}}'
      TALOS_SCHEMATIC_ID:
        sh: talosctl --nodes {{.NODE}} get nodeannotationspecs --output json | jq --raw-output '.spec | select(.key == "extensions.talos.dev/schematic") | .value'
      TALOS_VERSION:
        sh: yq 'select(document_index == 1).spec.postBuild.substitute.TALOS_VERSION' {{.KUBERNETES_DIR}}/apps/system-upgrade/system-upgrade-controller/ks.yaml
    requires:
      vars: [NODE]
    preconditions:
      - talosctl config info
      - talosctl --nodes {{.NODE}} get machineconfig
      - which talosctl yq jq

  upgrade-cluster:
    desc: Upgrade Talos across the whole cluster
    cmds:
      - for: { var: NODES }
        task: upgrade-node
        vars:
          NODE: '{{.ITEM}}'
    vars:
      NODES:
        sh: talosctl config info --output json | jq --join-output '[.nodes[]] | join(" ")'
    preconditions:
      - which jq talosctl

  upgrade-k8s:
    desc: Upgrade Kubernetes across the whole cluster
    prompt: Upgrade Kubernetes to {{.KUBERNETES_VERSION}} ... continue?
    cmd: talosctl --nodes {{.TALOS_CONTROLLER}} upgrade-k8s --to {{.KUBERNETES_VERSION}}
    vars:
      KUBERNETES_VERSION:
        sh: yq 'select(document_index == 1).spec.postBuild.substitute.KUBERNETES_VERSION' {{.KUBERNETES_DIR}}/apps/system-upgrade/system-upgrade-controller/ks.yaml
      TALOS_CONTROLLER:
        sh: talosctl config info --output json | jq --raw-output '.endpoints[]' | shuf -n 1
    preconditions:
      - talosctl config info
      - talosctl --nodes {{.TALOS_CONTROLLER}} get machineconfig
      - which talosctl yq jq

  reset-node:
    desc: Reset Talos on a single node [NODE=required]
    prompt: Reset Talos on {{.NODE}} ... continue?
    cmd: talosctl reset --nodes {{.NODE}} --system-labels-to-wipe STATE --system-labels-to-wipe EPHEMERAL --graceful=false --reboot
    requires:
      vars: [NODE]
    preconditions:
      - talosctl config info
      - talosctl --nodes {{.NODE}} get machineconfig
      - which talosctl

  reset-cluster:
    desc: Reset Talos across the whole cluster
    prompt: Reset Talos across the whole cluster ... continue?
    cmds:
      - for: { var: NODES }
        task: reset-node
        vars:
          NODE: '{{.ITEM}}'
    vars:
      NODES:
        sh: talosctl config info --output json | jq --join-output '[.nodes[]] | join(" ")'
    preconditions:
      - which jq talosctl

  generate-secret:
    desc: Generate Talos secret
    prompt: This will overwrite the existing secret ... continue?
    dir: '{{.TALOS_DIR}}'
    cmds:
      - talhelper gensecret > {{.TALOS_DIR}}/talsecret.sops.yaml
      - sops --encrypt --in-place {{.TALOS_DIR}}/talsecret.sops.yaml
    preconditions:
      - talosctl config info
      - which talosctl talhelper sops

  generate-config:
    desc: Generate Talos config
    dir: '{{.TALOS_DIR}}'
    cmd: talhelper genconfig
    preconditions:
      - talosctl config info
      - which talhelper
