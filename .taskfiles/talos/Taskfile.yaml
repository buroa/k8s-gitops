---
version: '3'

tasks:

  apply-node:
    desc: Apply Talos config to a node [IP=required] [MODE=auto]
    cmd: |-
      minijinja-cli {{.TALOS_DIR}}/{{.MACHINE_TYPE}}.yaml.j2 \
        | op inject \
        | talosctl --nodes {{.IP}} apply-config \
          --mode {{.MODE}} \
          --config-patch @{{.TALOS_DIR}}/{{.MACHINE_TYPE}}/{{.IP}}.yaml \
          --file /dev/stdin
    vars:
      MODE: '{{.MODE | default "auto"}}'
      MACHINE_TYPE:
        sh: talosctl --nodes {{.IP}} get machinetypes --output jsonpath='{.spec}'
    requires:
      vars: [IP]
    preconditions:
      - talosctl --nodes {{.IP}} get machineconfig
      - test -f {{.ROOT_DIR}}/.talos.env
      - test -f {{.TALOS_DIR}}/{{.MACHINE_TYPE}}.yaml.j2
      - test -f {{.TALOS_DIR}}/{{.MACHINE_TYPE}}/{{.IP}}.yaml
      - test -f {{.ROOT_DIR}}/talosconfig
      - which minijinja-cli op talosctl

  upgrade-node:
    desc: Upgrade Talos on a single node [IP=required]
    cmd: talosctl --nodes {{.IP}} upgrade --image="{{.TALOS_IMAGE}}" --timeout=10m
    vars:
      MACHINE_TYPE:
        sh: talosctl --nodes {{.IP}} get machinetypes --output jsonpath='{.spec}'
      IMAGE:
        sh: minijinja-cli {{.TALOS_DIR}}/{{.MACHINE_TYPE}}.yaml.j2 | yq '.machine.install.image' -
    requires:
      vars: [IP]
    preconditions:
      - talosctl config info
      - talosctl --nodes {{.IP}} get machineconfig
      - test -f {{.ROOT_DIR}}/.talos.env
      - test -f {{.TALOS_DIR}}/{{.MACHINE_TYPE}}.yaml.j2
      - test -f {{.TALOS_DIR}}/{{.MACHINE_TYPE}}/{{.IP}}.yaml
      - test -f {{.ROOT_DIR}}/talosconfig
      - which minijinja-cli talosctl yq

  upgrade-k8s:
    desc: Upgrade Kubernetes across the whole cluster
    cmd: talosctl --nodes {{.RANDOM_CONTROLLER}} upgrade-k8s --to $KUBERNETES_VERSION
    vars:
      RANDOM_CONTROLLER:
        sh: talosctl config info --output json | jq --raw-output '.endpoints[]' | shuf -n 1
    preconditions:
      - talosctl config info
      - talosctl --nodes {{.RANDOM_CONTROLLER}} get machineconfig
      - test -f {{.ROOT_DIR}}/.talos.env
      - test -f {{.ROOT_DIR}}/talosconfig
      - which jq talosctl

  reboot-node:
    desc: Reboot Talos on a single node [IP=required] [MODE=default]
    cmd: talosctl --nodes {{.IP}} reboot --mode={{.MODE}}
    vars:
      MODE: '{{.MODE | default "default"}}'
    requires:
      vars: [IP]
    preconditions:
      - talosctl config info
      - talosctl --nodes {{.IP}} get machineconfig
      - test -f {{.ROOT_DIR}}/.talos.env
      - test -f {{.ROOT_DIR}}/talosconfig
      - which talosctl

  shutdown-cluster:
    desc: Shutdown Talos across the whole cluster
    prompt: Shutdown the Talos cluster ... continue?
    cmd: talosctl shutdown --nodes {{.IPS}} --force
    vars:
      IPS:
        sh: talosctl config info --output json | jq --join-output '[.nodes[]] | join(",")'
    preconditions:
      - talosctl config info
      - talosctl --nodes {{.IPS}} get machineconfig
      - test -f {{.ROOT_DIR}}/talosconfig
      - which jq talosctl

  reset-node:
    desc: Reset Talos on a single node [IP=required]
    prompt: Reset Talos node '{{.IP}}' ... continue?
    cmd: talosctl reset --nodes {{.IP}} --graceful=false
    requires:
      vars: [IP]
    preconditions:
      - talosctl config info
      - talosctl --nodes {{.IP}} get machineconfig
      - test -f {{.ROOT_DIR}}/talosconfig
      - which talosctl

  reset-cluster:
    desc: Reset Talos across the whole cluster
    prompt: Reset the Talos cluster ... continue?
    cmd: talosctl reset --nodes {{.IPS}} --graceful=false
    vars:
      IPS:
        sh: talosctl config info --output json | jq --join-output '[.nodes[]] | join(",")'
    preconditions:
      - talosctl config info
      - talosctl --nodes {{.IPS}} get machineconfig
      - test -f {{.ROOT_DIR}}/talosconfig
      - which jq talosctl

  kubeconfig:
    desc: Generate the kubeconfig for a Talos cluster
    cmd: talosctl kubeconfig --nodes {{.RANDOM_CONTROLLER}} --force {{.ROOT_DIR}}
    vars:
      RANDOM_CONTROLLER:
        sh: talosctl config info --output json | jq --raw-output '.endpoints[]' | shuf -n 1
    preconditions:
      - talosctl config info
      - test -f {{.ROOT_DIR}}/talosconfig
      - which jq talosctl
