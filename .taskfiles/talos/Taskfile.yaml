---
version: "3"

vars:
  TALOS_CONTROLLER:
    sh: talosctl config info --output json | jq --raw-output '.endpoints[]' | shuf -n 1
  TALOS_SCHEMATIC_ID:
    sh: yq 'select(document_index == 1).spec.postBuild.substitute.TALOS_SCHEMATIC_ID' {{.KUBERNETES_DIR}}/apps/system-upgrade/system-upgrade-controller/ks.yaml
  TALOS_VERSION:
    sh: yq 'select(document_index == 1).spec.postBuild.substitute.TALOS_VERSION' {{.KUBERNETES_DIR}}/apps/system-upgrade/system-upgrade-controller/ks.yaml
  KUBERNETES_VERSION:
    sh: yq 'select(document_index == 1).spec.postBuild.substitute.KUBERNETES_VERSION' {{.KUBERNETES_DIR}}/apps/system-upgrade/system-upgrade-controller/ks.yaml

tasks:

  generate-secret:
    desc: Generate Talos secret
    prompt: This will overwrite the existing secret ... continue?
    dir: '{{.TALOS_DIR}}'
    cmds:
      - talhelper gensecret > {{.TALOS_DIR}}/talsecret.sops.yaml
      - sops --encrypt --in-place {{.TALOS_DIR}}/talsecret.sops.yaml
    preconditions:
      - test -f {{.TALOS_DIR}}/talconfig.yaml

  generate-config:
    desc: Generate Talos config
    dir: '{{.TALOS_DIR}}'
    cmd: talhelper genconfig
    preconditions:
      - test -f {{.TALOS_DIR}}/talconfig.yaml

  apply-config:
    desc: Apply Talos config to the nodes
    dir: '{{.TALOS_DIR}}'
    cmd: talhelper gencommand apply | bash
    preconditions:
      - test -f {{.TALOS_DIR}}/talconfig.yaml

  upgrade:
    desc: Upgrade Talos on a node
    prompt: Upgrade Talos node {{.node}} ... continue?
    cmd: talosctl --nodes {{.node}} upgrade --image=factory.talos.dev/installer-secureboot/{{.TALOS_SCHEMATIC_ID}}:{{.TALOS_VERSION}}
    requires:
      vars: ["node"]
    preconditions:
      - test -f {{.TALOS_DIR}}/clusterconfig/talosconfig
      - talosctl config info >/dev/null 2>&1
      - talosctl --nodes {{.node}} get machineconfig >/dev/null 2>&1

  upgrade-k8s:
    desc: Upgrade Kubernetes
    cmd: talosctl --nodes {{.TALOS_CONTROLLER}} upgrade-k8s --to {{.KUBERNETES_VERSION}}
    preconditions:
      - test -f {{.TALOS_DIR}}/clusterconfig/talosconfig
      - talosctl config info >/dev/null 2>&1
      - talosctl --nodes {{.TALOS_CONTROLLER}} get machineconfig >/dev/null 2>&1

  reset-node:
    desc: Reset a Talos node
    prompt: Reset Talos node {{.node}} ... continue?
    cmd: talosctl reset --nodes {{.node}} --system-labels-to-wipe STATE --system-labels-to-wipe EPHEMERAL --graceful=false --reboot
    requires:
      vars: ["node"]
    preconditions:
      - test -f {{.TALOS_DIR}}/clusterconfig/talosconfig
      - talosctl config info >/dev/null 2>&1
      - talosctl --nodes {{.node}} get machineconfig >/dev/null 2>&1

  reset-cluster:
    desc: Reset all the Talos nodes
    prompt: Reset Talos nodes {{.nodes}} ... continue?
    cmd: talosctl reset --nodes {{.nodes}} --system-labels-to-wipe STATE --system-labels-to-wipe EPHEMERAL --graceful=false --reboot
    vars:
      nodes:
        sh: talosctl config info --output json | jq --join-output '[.nodes[]] | join(",")'
    preconditions:
      - test -f {{.TALOS_DIR}}/clusterconfig/talosconfig
      - talosctl config info >/dev/null 2>&1
      - talosctl --nodes {{.nodes}} get machineconfig >/dev/null 2>&1
