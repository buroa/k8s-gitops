---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: "3"

# Taskfile used to manage certain VolSync tasks for a given application, limitations are as followed.
#   1. Fluxtomization, HelmRelease, PVC, ReplicationSource all have the same name (e.g. plex)
#   2. ReplicationSource and ReplicationDestination are a Restic repository
#   3. Each application only has one PVC that is being replicated

vars:
  VOLSYNC_RESOURCES_DIR: "{{.ROOT_DIR}}/.taskfiles/volsync/resources"

tasks:

  state-*:
    desc: Suspend or resume Volsync
    cmds:
      - flux --namespace flux-system {{.state}} kustomization volsync
      - flux --namespace volsync-system {{.state}} helmrelease volsync
      - kubectl --namespace volsync-system scale deployment volsync --replicas {{if eq .state "suspend"}}0{{else}}1{{end}}
    vars:
      state: '{{index .MATCH 0}}'
    preconditions:
      - '[[ "{{.state}}" == "suspend" || "{{.state}}" == "resume" ]]'

  unlock:
    desc: Unlock all restic source repos
    cmds:
      - for: { var: SOURCES, split: "\n" }
        cmd: kubectl --namespace {{splitList "," .ITEM | first}} patch --field-manager=flux-client-side-apply replicationsources {{splitList "," .ITEM | last}} --type merge --patch "{\"spec\":{\"restic\":{\"unlock\":\"{{now | unixEpoch}}\"}}}"
    vars:
      SOURCES:
        sh: kubectl get replicationsources --all-namespaces --no-headers --output=jsonpath='{range .items[*]}{.metadata.namespace},{.metadata.name}{"\n"}{end}'

  snapshot:
    desc: Snapshot an app [ns=default] [app=required]
    cmds:
      - kubectl patch clusterpolicy volsync --type merge -p '{"spec":{"useServerSideApply":true}}'
      - kubectl --namespace {{.ns}} patch replicationsources {{.app}} --type merge -p '{"spec":{"trigger":{"manual":"{{now | unixEpoch}}"}}}'
      - until kubectl --namespace {{.ns}} get job/{{.job}} &>/dev/null; do sleep 5; done
      - kubectl --namespace {{.ns}} wait job/{{.job}} --for=condition=complete --timeout=120m
      - kubectl patch clusterpolicy volsync --type merge -p '{"spec":{"useServerSideApply":null}}'
    vars:
      ns: '{{.ns | default "default"}}'
      job: volsync-src-{{.app}}
    requires:
      vars: [app]
    preconditions:
      - kubectl --namespace {{.ns}} get replicationsources {{.app}}

  restore:
    desc: Restore an app [ns=default] [app=required] [previous=required]
    cmds:
      # Suspend
      - flux --namespace flux-system suspend kustomization {{.app}}
      - flux --namespace {{.ns}} suspend helmrelease {{.app}}
      - kubectl --namespace {{.ns}} scale {{.controller}}/{{.app}} --replicas 0
      - kubectl --namespace {{.ns}} wait pod --for=delete --selector="app.kubernetes.io/name={{.app}}" --timeout=5m
      # Restore
      - minijinja-cli {{.VOLSYNC_RESOURCES_DIR}}/replicationdestination.yaml.j2 | kubectl apply --server-side --filename -
      - until kubectl --namespace {{.ns}} get job/volsync-dst-{{.app}}-manual &>/dev/null; do sleep 5; done
      - kubectl --namespace {{.ns}} wait job/volsync-dst-{{.app}}-manual --for=condition=complete --timeout=120m
      - kubectl --namespace {{.ns}} delete replicationdestination {{.app}}-manual
      # Resume
      - flux --namespace flux-system resume kustomization {{.app}}
      - flux --namespace {{.ns}} resume helmrelease {{.app}}
      - flux --namespace {{.ns}} reconcile helmrelease {{.app}} --force
      - kubectl --namespace {{.ns}} wait pod --for=condition=ready --selector="app.kubernetes.io/name={{.app}}" --timeout=5m
    vars:
      ns: '{{.ns | default "default"}}'
      controller:
        sh: kubectl --namespace {{.ns}} get deployment {{.app}} &>/dev/null && echo deployment || echo statefulset
    env:
      NS: '{{.ns}}'
      APP: '{{.app}}'
      PREVIOUS: '{{.previous}}'
      CLAIM:
        sh: kubectl --namespace {{.ns}} get replicationsources/{{.app}} --output=jsonpath="{.spec.sourcePVC}"
      ACCESS_MODES:
        sh: kubectl --namespace {{.ns}} get replicationsources/{{.app}} --output=jsonpath="{.spec.restic.accessModes}"
      STORAGE_CLASS_NAME:
        sh: kubectl --namespace {{.ns}} get replicationsources/{{.app}} --output=jsonpath="{.spec.restic.storageClassName}"
      PUID:
        sh: kubectl --namespace {{.ns}} get replicationsources/{{.app}} --output=jsonpath="{.spec.restic.moverSecurityContext.runAsUser}"
      PGID:
        sh: kubectl --namespace {{.ns}} get replicationsources/{{.app}} --output=jsonpath="{.spec.restic.moverSecurityContext.runAsGroup}"
    requires:
      vars: [app, previous]
    preconditions:
      - test -f {{.VOLSYNC_RESOURCES_DIR}}/replicationdestination.yaml.j2

  unlock-local:
    desc: Unlock a restic source repo from local machine [ns=default] [app=required]
    cmds:
      - minijinja-cli {{.VOLSYNC_RESOURCES_DIR}}/unlock.yaml.j2 | kubectl apply --server-side --filename -
      - until kubectl --namespace {{.ns}} get job/volsync-unlock-{{.app}} &>/dev/null; do sleep 5; done
      - kubectl --namespace {{.ns}} wait job/volsync-unlock-{{.app}} --for condition=complete --timeout=5m
      - stern --namespace {{.ns}} job/volsync-unlock-{{.app}} --no-follow
      - kubectl --namespace {{.ns}} delete job volsync-unlock-{{.app}}
    vars:
      ns: '{{.ns | default "default"}}'
    env:
      NS: '{{.ns}}'
      APP: '{{.app}}'
    requires:
      vars: [app]
    preconditions:
      - test -f {{.VOLSYNC_RESOURCES_DIR}}/unlock.yaml.j2
