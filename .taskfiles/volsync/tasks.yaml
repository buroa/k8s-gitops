---
version: "3"

# This taskfile is used to manage certain VolSync tasks for a given application, limitations are described below.
#   1. Fluxtomization, HelmRelease, PVC, ReplicationSource all have the same name (e.g. plex)
#   2. ReplicationSource and ReplicationDestination are a Restic repository
#   3. Applications are deployed as either a Kubernetes Deployment or StatefulSet
#   4. Each application only has one PVC that is being replicated

x-task-vars: &task-vars
  app: '{{.app}}'
  controller: '{{.controller}}'
  claim: '{{.claim}}'
  ks: '{{.ks}}'
  puid: '{{.puid}}'
  pgid: '{{.pgid}}'
  ns: '{{.ns}}'
  previous: '{{.previous}}'
  ts: '{{.ts}}'

vars:
  volsyncScriptsDir: '{{.ROOT_DIR}}/.taskfiles/volsync/scripts'
  volsyncTemplatesDir: '{{.ROOT_DIR}}/.taskfiles/volsync/templates'
  ts: '{{now | date "150405"}}'

tasks:
  list:
    desc: List all snapshots
    summary: task {{.TASK}} app=plex [ns=default]
    cmds:
      - envsubst < <(cat {{.volsyncTemplatesDir}}/list.tmpl.yaml) | kubectl apply -f -
      - bash {{.volsyncScriptsDir}}/wait.sh list-{{.app}}-{{.ts}} {{.ns}}
      - kubectl -n {{.ns}} wait job/list-{{.app}}-{{.ts}} --for condition=complete --timeout=1m
      - kubectl -n {{.ns}} logs job/list-{{.app}}-{{.ts}} --container list
      - kubectl -n {{.ns}} delete job list-{{.app}}-{{.ts}}
    vars:
      app: '{{ or .app (fail "Argument (app) is required") }}'
      ns: '{{.ns | default "default"}}'
    env: *task-vars
    preconditions:
      - sh: test -f {{.volsyncScriptsDir}}/wait.sh
      - sh: test -f {{.volsyncTemplatesDir}}/list.tmpl.yaml
    silent: true

  unlock:
    desc: Unlock a Restic repository
    summary: task {{.TASK}} app=plex [ns=default]
    cmds:
      - envsubst < <(cat {{.volsyncTemplatesDir}}/unlock.tmpl.yaml) | kubectl apply -f -
      - bash {{.volsyncScriptsDir}}/wait.sh unlock-{{.app}}-{{.ts}} {{.ns}}
      - kubectl -n {{.ns}} wait job/unlock-{{.app}}-{{.ts}} --for condition=complete --timeout=1m
      - kubectl -n {{.ns}} logs job/unlock-{{.app}}-{{.ts}} --container unlock
      - kubectl -n {{.ns}} delete job unlock-{{.app}}-{{.ts}}
    vars:
      app: '{{ or .app (fail "Argument (app) is required") }}'
      ns: '{{.ns | default "default"}}'
    env: *task-vars
    preconditions:
      - sh: test -f {{.volsyncScriptsDir}}/wait.sh
      - sh: test -f {{.volsyncTemplatesDir}}/unlock.tmpl.yaml
    silent: true

  # To run backup jobs in parallel for all replicationsources:
  #  - kubectl get replicationsources --all-namespaces --no-headers | awk '{print $2, $1}' | xargs --max-procs=4 -l bash -c 'task volsync:snapshot app=$0 ns=$1'
  snapshot:
    desc: Trigger a Restic ReplicationSource snapshot
    summary: task {{.TASK}} app=plex [ns=default]
    cmds:
      # # TODO: Only suspend when a arg is passed to the task
      # # https://github.com/go-task/task/issues/608
      # - task: suspend-task
      #   vars: *task-vars
      - kubectl -n {{.ns}} patch replicationsources {{.app}}-rsrc --type merge -p '{"spec":{"trigger":{"manual":"{{.ts}}"}}}'
      - bash {{.volsyncScriptsDir}}/wait.sh volsync-src-{{.app}} {{.ns}}
      - kubectl -n {{.ns}} wait job/volsync-src-{{.app}} --for condition=complete --timeout=120m
    vars:
      app: '{{ or .app (fail "Argument (app) is required") }}'
      ns: '{{.ns | default "default"}}'
      controller:
        sh: "{{.volsyncScriptsDir}}/controller.sh {{.app}} {{.ns}}"
    env: *task-vars
    preconditions:
      - sh: test -f {{.volsyncScriptsDir}}/controller.sh
      - sh: test -f {{.volsyncScriptsDir}}/wait.sh
      - sh: kubectl -n {{.ns}} get replicationsources {{.app}}-rsrc
        msg: "ReplicationSource '{{.app}}' not found in namespace '{{.ns}}'"

  # To run restore jobs in parallel for all replicationdestinations:
  #   - kubectl get replicationsources --all-namespaces --no-headers | awk '{print $2, $1}' | xargs --max-procs=4 -l bash -c 'task volsync:restore app=$0 ns=$1'
  restore:
    desc: Trigger a Restic ReplicationSource restore
    summary: task {{.TASK}} app=plex [ns=default] [previous=2]
    cmds:
      - task: suspend-task
        vars: *task-vars
      - task: wipe-task
        vars: *task-vars
      - task: restore-task
        vars: *task-vars
      - task: resume-task
        vars: *task-vars
    vars:
      app: '{{ or .app (fail "Argument (app) is required") }}'
      ns: '{{.ns | default "default"}}'
      previous: '{{.previous | default 2}}'
      controller:
        sh: "{{.volsyncScriptsDir}}/controller.sh {{.app}} {{.ns}}"
      claim:
        sh: kubectl -n {{.ns}} get replicationsources/{{.app}}-rsrc -o jsonpath="{.spec.sourcePVC}"
      puid:
        sh: kubectl -n {{.ns}} get replicationsources/{{.app}}-rsrc -o jsonpath="{.spec.restic.moverSecurityContext.runAsUser}"
      pgid:
        sh: kubectl -n {{.ns}} get replicationsources/{{.app}}-rsrc -o jsonpath="{.spec.restic.moverSecurityContext.runAsGroup}"
      ks:
        sh: |
          kubectl -n {{.ns}} get replicationsources/{{.app}}-rsrc \
            -o jsonpath="{.metadata.labels.kustomize\.toolkit\.fluxcd\.io/name}"
    env: *task-vars
    preconditions:
      - sh: test -f {{.volsyncScriptsDir}}/controller.sh
      - sh: test -f {{.volsyncScriptsDir}}/wait.sh
      - sh: test -f {{.volsyncTemplatesDir}}/replicationdestination.tmpl.yaml
      - sh: test -f {{.volsyncTemplatesDir}}/wipe.tmpl.yaml

  # Suspend the Flux ks and hr
  suspend-task:
    internal: true
    cmds:
      - flux -n flux-system suspend kustomization {{.ks}}
      - flux -n {{.ns}} suspend helmrelease {{.app}}
      - kubectl -n {{.ns}} scale {{.controller}} --replicas 0
      - kubectl -n {{.ns}} wait pod --for delete --selector="app.kubernetes.io/name={{.app}}" --timeout=2m
    env: *task-vars

  # Wipe the PVC of all data
  wipe-task:
    internal: true
    cmds:
      - envsubst < <(cat {{.volsyncTemplatesDir}}/wipe.tmpl.yaml) | kubectl apply -f -
      - bash {{.volsyncScriptsDir}}/wait.sh wipe-{{.app}}-{{.ts}} {{.ns}}
      - kubectl -n {{.ns}} wait job/wipe-{{.app}}-{{.ts}} --for condition=complete --timeout=120m
      - kubectl -n {{.ns}} logs job/wipe-{{.app}}-{{.ts}} --container wipe
      - kubectl -n {{.ns}} delete job wipe-{{.app}}-{{.ts}}
    env: *task-vars

  # Create VolSync replicationdestination CR to restore data
  restore-task:
    internal: true
    cmds:
      - envsubst < <(cat {{.volsyncTemplatesDir}}/replicationdestination.tmpl.yaml) | kubectl apply -f -
      - bash {{.volsyncScriptsDir}}/wait.sh volsync-dst-{{.app}}-{{.ts}} {{.ns}}
      - kubectl -n {{.ns}} wait job/volsync-dst-{{.app}}-{{.ts}} --for condition=complete --timeout=120m
      - kubectl -n {{.ns}} delete replicationdestination {{.app}}-{{.ts}}
    env: *task-vars

  # Resume Flux ks and hr
  resume-task:
    internal: true
    cmds:
      - flux -n {{.ns}} resume helmrelease {{.app}}
      - flux -n flux-system resume kustomization {{.ks}}
    env: *task-vars
