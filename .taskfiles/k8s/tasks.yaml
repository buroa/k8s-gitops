---
version: "3"

tasks:
  privileged:
    desc: Run a privileged pod
    interactive: true
    vars:
      node: "{{.node | default nil}}"
      namespace: '{{.namespace | default "default"}}'
      hostnetwork: "{{.hostnetwork | default false}}"
    cmds:
      - |
        kubectl run -n {{.namespace}} debug-privileged -i --tty --rm --image=null --overrides='
          {
            "apiVersion": "v1",
            "spec": {
              "containers": [
                {
                  "name": "debug",
                  "image": "ghcr.io/onedr0p/alpine:rolling",
                  "command": [
                    "/bin/bash"
                  ],
                  "stdin": true,
                  "stdinOnce": true,
                  "tty": true,
                  "securityContext": {
                    "privileged": true
                  }
                }
              ],
              {{- if .node }}
              "nodeName": "{{.node}}",
              {{- end }}
              {{- if .hostnetwork }}
              "hostNetwork": true,
              {{- end }}
              "restartPolicy": "Never"
            }
          }'

  mount:
    desc: Mount a PersistantVolumeClaim to a pod temporarily
    interactive: true
    vars:
      claim: '{{ or .claim (fail "PersistentVolumeClaim `claim` is required") }}'
      namespace: '{{.namespace | default "default"}}'
    cmds:
      - |
        kubectl run -n {{.namespace}} debug-{{.claim}} -i --tty --rm --image=null --overrides='
          {
            "apiVersion": "v1",
            "spec": {
              "containers": [
                {
                  "name": "debug",
                  "image": "ghcr.io/onedr0p/alpine:rolling",
                  "command": [
                    "/bin/bash"
                  ],
                  "stdin": true,
                  "stdinOnce": true,
                  "tty": true,
                  "volumeMounts": [
                    {
                      "name": "config",
                      "mountPath": "/data/config"
                    }
                  ]
                }
              ],
              "volumes": [
                {
                  "name": "config",
                  "persistentVolumeClaim": {
                    "claimName": "{{.claim}}"
                  }
                }
              ],
              "restartPolicy": "Never"
            }
          }'
    preconditions:
      - kubectl -n {{.namespace}} get pvc {{.claim}}

  delete-failed-pods:
    desc: Deletes failed pods
    cmds:
      - kubectl delete pods --field-selector status.phase=Failed -A --ignore-not-found=true

  delete-succeeded-pods:
    desc: Deletes succeeded pods
    cmds:
      - kubectl delete pods --field-selector status.phase=Succeeded -A --ignore-not-found=true
