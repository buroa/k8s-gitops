#!/bin/bash

echo "üåä SEAWEEDFS MONITORING SETUP"
echo "============================="
echo "Setting up monitoring and alerting for SeaweedFS"
echo

# Check if we can reach the endpoints
echo "üîç Checking SeaweedFS endpoints..."

if curl -sI https://s3.hypyr.space >/dev/null 2>&1; then
    echo "‚úÖ S3 API endpoint is accessible"
else
    echo "‚ùå S3 API endpoint is not accessible"
    exit 1
fi

if curl -sI https://s3-web.hypyr.space >/dev/null 2>&1; then
    echo "‚úÖ Web UI endpoint is accessible"
else
    echo "‚ùå Web UI endpoint is not accessible"
    exit 1
fi

echo
echo "üìä SeaweedFS Monitoring Options:"
echo "==============================="
echo

echo "1. üìà GRAFANA DASHBOARD SETUP"
echo "   - Add SeaweedFS monitoring to your existing Grafana"
echo "   - Monitor storage usage, request rates, and performance"
echo

echo "2. üö® PROMETHEUS ALERTS"
echo "   - Set up alerts for SeaweedFS availability"
echo "   - Monitor backup job success/failure rates"
echo

echo "3. üì± NOTIFICATION SETUP"
echo "   - Configure Discord/Slack notifications"
echo "   - Alert on backup failures or storage issues"
echo

echo "4. üîç LOG MONITORING"
echo "   - Monitor SeaweedFS container logs"
echo "   - Track S3 API request patterns"
echo

echo "üìã Current Monitoring Status:"
echo "============================"

# Check if Prometheus is available in cluster
if command -v kubectl >/dev/null 2>&1 && kubectl cluster-info >/dev/null 2>&1; then
    if kubectl get prometheus -n observability >/dev/null 2>&1; then
        echo "‚úÖ Prometheus is available in the cluster"

        # Check for Grafana
        if kubectl get deployment grafana -n observability >/dev/null 2>&1; then
            echo "‚úÖ Grafana is available in the cluster"
        else
            echo "‚ö†Ô∏è  Grafana not found in observability namespace"
        fi

        # Check for existing volsync monitoring
        if kubectl get prometheusrule volsync -n volsync-system >/dev/null 2>&1; then
            echo "‚úÖ VolSync monitoring rules are configured"
        else
            echo "‚ö†Ô∏è  VolSync monitoring rules not found"
        fi
    else
        echo "‚ö†Ô∏è  Prometheus not found in observability namespace"
    fi
else
    echo "‚ö†Ô∏è  Kubernetes cluster not accessible"
fi

echo
echo "üîß MONITORING RECOMMENDATIONS:"
echo "=============================="

echo
echo "1. üìä ADD SEAWEEDFS TO GRAFANA:"
echo "   ‚Ä¢ Open Grafana: kubectl port-forward -n observability svc/grafana 3000:80"
echo "   ‚Ä¢ Import SeaweedFS dashboard (if available)"
echo "   ‚Ä¢ Create custom dashboard for storage metrics"
echo

echo "2. üö® BACKUP MONITORING ALERTS:"
echo "   ‚Ä¢ Monitor volsync replication source status"
echo "   ‚Ä¢ Alert on failed backup jobs"
echo "   ‚Ä¢ Track backup size and frequency"
echo

echo "3. üìà KEY METRICS TO MONITOR:"
echo "   ‚Ä¢ S3 API response times"
echo "   ‚Ä¢ Storage usage growth"
echo "   ‚Ä¢ Backup success/failure rates"
echo "   ‚Ä¢ Network I/O to SeaweedFS"
echo

echo "4. üîç USEFUL QUERIES:"
echo

cat << 'EOF'
   ‚Ä¢ Backup Success Rate:
     (rate(volsync_replication_source_success_total[5m]) / rate(volsync_replication_source_total[5m])) * 100

   ‚Ä¢ Storage Usage Trend:
     increase(container_fs_usage_bytes{container_label_name="seaweedfs"}[1h])

   ‚Ä¢ S3 API Availability:
     up{job="seaweedfs-metrics"}

   ‚Ä¢ Backup Job Duration:
     histogram_quantile(0.95, rate(volsync_replication_duration_seconds_bucket[5m]))
EOF

echo
echo "üéØ QUICK MONITORING SETUP:"
echo "=========================="

cat << 'EOF'
1. Monitor via Web UI:
   ‚Ä¢ Visit: https://s3-web.hypyr.space
   ‚Ä¢ Check volume usage and file counts
   ‚Ä¢ Monitor active connections

2. Monitor via kubectl:
   ‚Ä¢ kubectl get replicationsources -A
   ‚Ä¢ kubectl get jobs -A | grep restic
   ‚Ä¢ kubectl logs -n volsync-system deployment/volsync

3. Monitor via s3cmd:
   ‚Ä¢ s3cmd du s3://volsync --access_key=X --secret_key=Y --host=s3.hypyr.space
   ‚Ä¢ Check backup sizes and growth

4. System monitoring:
   ‚Ä¢ ssh cpritchett@razzia.hypyr.space "docker stats seaweedfs"
   ‚Ä¢ Monitor NAS storage usage
   ‚Ä¢ Check network bandwidth usage
EOF

echo
echo "üö® ALERT RECOMMENDATIONS:"
echo "========================="

cat << 'EOF'
Critical Alerts:
‚Ä¢ SeaweedFS container down
‚Ä¢ S3 API endpoint unreachable
‚Ä¢ Backup jobs failing consistently
‚Ä¢ Storage usage > 90%

Warning Alerts:
‚Ä¢ Backup duration increasing
‚Ä¢ Storage growth rate high
‚Ä¢ S3 API response time degraded
‚Ä¢ Container resource usage high
EOF

echo
echo "üì± NOTIFICATION SETUP:"
echo "====================="

echo "To enable notifications, configure your existing alertmanager with:"
echo
echo "1. Discord webhook for backup failures"
echo "2. Email alerts for storage warnings"
echo "3. Slack notifications for critical issues"
echo

echo "‚ú® Monitoring setup information provided!"
echo
echo "üîó Useful Links:"
echo "   ‚Ä¢ SeaweedFS Web UI: https://s3-web.hypyr.space"
echo "   ‚Ä¢ Check backup status: ./scripts/check-seaweedfs-status.sh"
echo "   ‚Ä¢ Grafana (when port-forwarded): http://localhost:3000"
echo
echo "üí° TIP: Bookmark the SeaweedFS Web UI for quick storage monitoring!"
