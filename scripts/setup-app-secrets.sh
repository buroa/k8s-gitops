#!/bin/bash

echo "üü° MEDIUM PRIORITY: App-Generated Secrets Setup"
echo "==============================================="
echo "This script helps you set up secrets that are generated by applications"
echo "after they're deployed and running in your cluster."
echo
echo "‚ö†Ô∏è  Prerequisites: Applications must be deployed and accessible first!"
echo

# Function to create 1Password entry
create_op_entry() {
    local title="$1"
    local category="$2"
    shift 2
    local fields=("$@")

    echo "Creating 1Password entry: $title"
    op item create --category="$category" --title="$title" --vault="homelab" "${fields[@]}"

    if [[ $? -eq 0 ]]; then
        echo "‚úÖ Successfully created '$title' entry"
    else
        echo "‚ùå Failed to create '$title' entry"
        return 1
    fi
    echo
}

echo "üì± MEDIA STACK APPLICATIONS"
echo "==========================="
echo "These apps generate API keys in their web UI after deployment:"
echo

# Radarr
echo "1Ô∏è‚É£  RADARR (Movie Management)"
echo "How to get API key:"
echo "  1. Access Radarr web UI (usually http://radarr.your-domain.com)"
echo "  2. Go to Settings ‚Üí General"
echo "  3. Copy the API Key"
echo
read -p "Enter Radarr API key (or 'skip' to skip): " RADARR_API
if [[ "$RADARR_API" != "skip" && -n "$RADARR_API" ]]; then
    create_op_entry "radarr" "API Credential" "RADARR_API_KEY[concealed]=$RADARR_API"
fi

# Sonarr
echo "2Ô∏è‚É£  SONARR (TV Management)"
echo "How to get API key:"
echo "  1. Access Sonarr web UI (usually http://sonarr.your-domain.com)"
echo "  2. Go to Settings ‚Üí General"
echo "  3. Copy the API Key"
echo
read -p "Enter Sonarr API key (or 'skip' to skip): " SONARR_API
if [[ "$SONARR_API" != "skip" && -n "$SONARR_API" ]]; then
    create_op_entry "sonarr" "API Credential" "SONARR_API_KEY[concealed]=$SONARR_API"
fi

# Prowlarr
echo "3Ô∏è‚É£  PROWLARR (Indexer Management)"
echo "How to get API key:"
echo "  1. Access Prowlarr web UI (usually http://prowlarr.your-domain.com)"
echo "  2. Go to Settings ‚Üí General"
echo "  3. Copy the API Key"
echo
read -p "Enter Prowlarr API key (or 'skip' to skip): " PROWLARR_API
if [[ "$PROWLARR_API" != "skip" && -n "$PROWLARR_API" ]]; then
    create_op_entry "prowlarr" "API Credential" "PROWLARR_API_KEY[concealed]=$PROWLARR_API"
fi

# SABnzbd
echo "4Ô∏è‚É£  SABNZBD (Download Client)"
echo "How to get API keys:"
echo "  1. Access SABnzbd web UI (usually http://sabnzbd.your-domain.com)"
echo "  2. Go to Config ‚Üí General"
echo "  3. Copy both API Key and NZB Key"
echo
read -p "Enter SABnzbd API key (or 'skip' to skip): " SABNZBD_API
if [[ "$SABNZBD_API" != "skip" && -n "$SABNZBD_API" ]]; then
    read -p "Enter SABnzbd NZB key: " SABNZBD_NZB
    create_op_entry "sabnzbd" "API Credential" \
        "SABNZBD_API_KEY[concealed]=$SABNZBD_API" \
        "SABNZBD_NZB_KEY[concealed]=$SABNZBD_NZB"
fi

# Autobrr
echo "5Ô∏è‚É£  AUTOBRR (Release Automation)"
echo "How to get API key:"
echo "  1. Access Autobrr web UI (usually http://autobrr.your-domain.com)"
echo "  2. Go to Settings ‚Üí API"
echo "  3. Generate and copy API Key"
echo
read -p "Enter Autobrr API key (or 'skip' to skip): " AUTOBRR_API
if [[ "$AUTOBRR_API" != "skip" && -n "$AUTOBRR_API" ]]; then
    create_op_entry "autobrr" "API Credential" "AUTOBRR_API_KEY[concealed]=$AUTOBRR_API"
fi

# Cross-seed
echo "6Ô∏è‚É£  CROSS-SEED (Cross-seeding)"
echo "How to get API key:"
echo "  1. Access Cross-seed web UI (usually http://cross-seed.your-domain.com)"
echo "  2. Go to Settings ‚Üí API"
echo "  3. Generate and copy API Key"
echo
read -p "Enter Cross-seed API key (or 'skip' to skip): " CROSSSEED_API
if [[ "$CROSSSEED_API" != "skip" && -n "$CROSSSEED_API" ]]; then
    create_op_entry "cross-seed" "API Credential" "CROSS_SEED_API_KEY[concealed]=$CROSSSEED_API"
fi

echo
echo "üìä MONITORING & TOOLS"
echo "===================="

# Grafana
echo "7Ô∏è‚É£  GRAFANA (Dashboards)"
echo "How to set admin password:"
echo "  1. Access Grafana web UI (usually http://grafana.your-domain.com)"
echo "  2. Login with default admin/admin"
echo "  3. Set a new admin password when prompted"
echo
read -p "Enter Grafana admin password (or 'skip' to skip): " GRAFANA_PASS
if [[ "$GRAFANA_PASS" != "skip" && -n "$GRAFANA_PASS" ]]; then
    create_op_entry "grafana" "Login" \
        "username[text]=admin" \
        "password[password]=$GRAFANA_PASS" \
        "GF_SECURITY_ADMIN_PASSWORD[concealed]=$GRAFANA_PASS"
fi

# Gatus
echo "8Ô∏è‚É£  GATUS (Status Monitoring)"
echo "How to set admin password:"
echo "  1. Access Gatus web UI (usually http://gatus.your-domain.com)"
echo "  2. Set admin credentials during first access"
echo
read -p "Enter Gatus admin username (or 'skip' to skip): " GATUS_USER
if [[ "$GATUS_USER" != "skip" && -n "$GATUS_USER" ]]; then
    read -p "Enter Gatus admin password: " GATUS_PASS
    create_op_entry "gatus" "Login" \
        "username[text]=$GATUS_USER" \
        "password[password]=$GATUS_PASS" \
        "GATUS_ADMIN_USERNAME[text]=$GATUS_USER" \
        "GATUS_ADMIN_PASSWORD[concealed]=$GATUS_PASS"
fi

# Atuin
echo "9Ô∏è‚É£  ATUIN (Shell History)"
echo "How to set admin password:"
echo "  1. Access Atuin web UI (usually http://atuin.your-domain.com)"
echo "  2. Set admin credentials during first access"
echo
read -p "Enter Atuin admin username (or 'skip' to skip): " ATUIN_USER
if [[ "$ATUIN_USER" != "skip" && -n "$ATUIN_USER" ]]; then
    read -p "Enter Atuin admin password: " ATUIN_PASS
    create_op_entry "atuin" "Login" \
        "username[text]=$ATUIN_USER" \
        "password[password]=$ATUIN_PASS" \
        "ATUIN_ADMIN_USERNAME[text]=$ATUIN_USER" \
        "ATUIN_ADMIN_PASSWORD[concealed]=$ATUIN_PASS"
fi

echo
echo "üè† IOT DEVICES"
echo "============="

# Zigbee2MQTT
echo "üîü ZIGBEE2MQTT (Zigbee Device Management)"
echo "How to set MQTT credentials:"
echo "  1. Access Zigbee2MQTT web UI (usually http://zigbee2mqtt.your-domain.com)"
echo "  2. Configure MQTT broker settings"
echo "  3. Set username and password for MQTT connection"
echo
read -p "Enter MQTT username (or 'skip' to skip): " MQTT_USER
if [[ "$MQTT_USER" != "skip" && -n "$MQTT_USER" ]]; then
    read -p "Enter MQTT password: " MQTT_PASS
    create_op_entry "zigbee2mqtt" "Login" \
        "MQTT_USER[text]=$MQTT_USER" \
        "MQTT_PASS[concealed]=$MQTT_PASS"
fi

echo
echo "==============================================="
echo "‚úÖ MEDIUM PRIORITY SETUP COMPLETE!"
echo "==============================================="
echo
echo "üìù WHAT'S BEEN CONFIGURED:"
echo "- Media stack API keys (as provided)"
echo "- Monitoring tool admin passwords (as provided)"
echo "- IoT device credentials (as provided)"
echo
echo "üîÑ NEXT STEPS:"
echo "1. Verify ExternalSecrets are pulling the new credentials:"
echo "   kubectl get externalsecrets -A"
echo
echo "2. Check that secrets are being created:"
echo "   kubectl get secrets -A | grep -v kubernetes.io"
echo
echo "3. Restart affected applications if needed:"
echo "   kubectl rollout restart deployment/<app-name> -n <namespace>"
echo
echo "üìö Skipped any apps? Run this script again anytime!"
echo "    Apps you skipped will still be available for setup."
