---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: kube-prometheus-stack
  namespace: monitoring
spec:
  interval: 6h
  maxHistory: 2
  timeout: 20m
  chart:
    spec:
      # renovate: registryUrl=https://prometheus-community.github.io/helm-charts
      chart: kube-prometheus-stack
      version: 45.3.0
      sourceRef:
        kind: HelmRepository
        name: prometheus-community-charts
        namespace: flux-system
  values:
    alertmanager:
      config:
        global:
          resolve_timeout: 5m
        inhibit_rules:
          - source_matchers:
              - "severity = critical"
            target_matchers:
              - "severity =~ warning|info"
            equal:
              - "namespace"
              - "alertname"
          - source_matchers:
              - "severity = warning"
            target_matchers:
              - "severity = info"
            equal:
              - "namespace"
              - "alertname"
          - source_matchers:
              - "alertname = InfoInhibitor"
            target_matchers:
              - "severity = info"
            equal:
              - "namespace"
        route:
          group_by: ["namespace"]
          group_wait: 30s
          group_interval: 5m
          repeat_interval: 12h
          receiver: "telegram"
          routes:
            - receiver: "null"
              matchers:
                - alertname =~ "InfoInhibitor|Watchdog"
        receivers:
          - name: "null"
          - name: "telegram"
            telegram_configs:
              - bot_token: "${SECRET_TELEGRAM_BOT_TOKEN}"
                chat_id: "${SECRET_TELEGRAM_CHAT_ID}"
        templates:
          - "/etc/alertmanager/config/*.tmpl"
      ingress:
        enabled: true
        annotations:
          kubernetes.io/tls-acme: "true"
          kubernetes.io/ingress.class: contour
          cert-manager.io/cluster-issuer: letsencrypt-prod
          ingress.kubernetes.io/force-ssl-redirect: "true"
          projectcontour.io/websocket-routes: "/"
        hosts:
          - &hosta am.${SECRET_PUBLIC_DOMAIN}
        paths:
          - /
        tls:
          - secretName: am-tls
            hosts:
              - *hosta
    prometheus:
      ingress:
        enabled: true
        annotations:
          kubernetes.io/tls-acme: "true"
          kubernetes.io/ingress.class: contour
          cert-manager.io/cluster-issuer: letsencrypt-prod
          ingress.kubernetes.io/force-ssl-redirect: "true"
          projectcontour.io/websocket-routes: "/"
        hosts:
          - &hostp prometheus.${SECRET_PUBLIC_DOMAIN}
        paths:
          - /
        tls:
          - secretName: prometheus-tls
            hosts:
              - *hostp
      prometheusSpec:
        ruleSelectorNilUsesHelmValues: false
        podMonitorSelectorNilUsesHelmValues: false
        serviceMonitorSelectorNilUsesHelmValues: false
    grafana:
      nodeSelector:
        node.kubernetes.io/instance-type: ${INSTANCE_TYPE_DEFAULT}
      ingress:
        enabled: true
        annotations:
          kubernetes.io/tls-acme: "true"
          kubernetes.io/ingress.class: contour
          cert-manager.io/cluster-issuer: letsencrypt-prod
          ingress.kubernetes.io/force-ssl-redirect: "true"
          projectcontour.io/websocket-routes: "/"
        hosts:
          - &hostg grafana.${SECRET_PUBLIC_DOMAIN}
        paths:
          - /
        tls:
          - secretName: grafana-tls
            hosts:
              - *hostg
      sidecar:
        dashboards:
          labelValue: 1
          searchNamespace: "ALL"
      grafana.ini:
        server:
          root_url: https://grafana.${SECRET_PUBLIC_DOMAIN}
        auth:
          disable_login_form: true
          oauth_auto_login: true
          disable_signout_menu: true
        auth.basic:
          enabled: false
        auth.generic_oauth:
          enabled: true
          name: authentik
          client_id: "${SECRET_AUTHENTIK_GRAFANA_CLIENT_ID}"
          client_secret: "${SECRET_AUTHENTIK_GRAFANA_CLIENT_SECRET}"
          scopes: openid email profile
          auth_url: https://auth.${SECRET_PUBLIC_DOMAIN}/application/o/authorize/
          token_url: http://authentik.home.svc.cluster.local/application/o/token/
          api_url: http://authentik.home.svc.cluster.local/application/o/userinfo/
          role_attribute_path: contains(groups[*], 'Grafana Admins') && 'Admin' || contains(groups[*], 'Grafana Editors') && 'Editor' || 'Viewer'
      persistence:
        enabled: true
        type: pvc
        existingClaim: grafana-config
