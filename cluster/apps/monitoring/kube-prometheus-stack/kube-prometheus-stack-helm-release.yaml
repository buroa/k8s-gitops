---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: kube-prometheus-stack
  namespace: monitoring
spec:
  interval: 6h
  maxHistory: 2
  timeout: 20m
  chart:
    spec:
      # renovate: registryUrl=https://prometheus-community.github.io/helm-charts
      chart: kube-prometheus-stack
      version: 45.7.1
      sourceRef:
        kind: HelmRepository
        name: prometheus-community-charts
        namespace: flux-system
  values:
    alertmanager:
      config:
        global:
          resolve_timeout: 5m
        inhibit_rules:
          - source_matchers:
              - "severity = critical"
            target_matchers:
              - "severity =~ warning|info"
            equal:
              - "namespace"
              - "alertname"
          - source_matchers:
              - "severity = warning"
            target_matchers:
              - "severity = info"
            equal:
              - "namespace"
              - "alertname"
          - source_matchers:
              - "alertname = InfoInhibitor"
            target_matchers:
              - "severity = info"
            equal:
              - "namespace"
        route:
          group_by: ["namespace"]
          group_wait: 30s
          group_interval: 5m
          repeat_interval: 12h
          receiver: "telegram"
          routes:
            - receiver: "null"
              matchers:
                - alertname =~ "InfoInhibitor|Watchdog"
        receivers:
          - name: "null"
          - name: "telegram"
            telegram_configs:
              - bot_token: "${SECRET_TELEGRAM_BOT_TOKEN}"
                chat_id: "${SECRET_TELEGRAM_CHAT_ID}"
        templates:
          - "/etc/alertmanager/config/*.tmpl"
      ingress:
        enabled: true
        annotations:
          kubernetes.io/tls-acme: "true"
          kubernetes.io/ingress.class: contour
          cert-manager.io/cluster-issuer: letsencrypt-prod
          ingress.kubernetes.io/force-ssl-redirect: "true"
          projectcontour.io/websocket-routes: "/"
        hosts:
          - &hosta am.${SECRET_PUBLIC_DOMAIN}
        paths:
          - /
        tls:
          - secretName: alertmanager-tls
            hosts:
              - *hosta
      alertmanagerSpec:
        replicas: 3
        podAntiAffinity: hard
        storage:
          volumeClaimTemplate:
            spec:
              storageClassName: ceph-block
              resources:
                requests:
                  storage: 1Gi
    kubelet:
      enabled: true
      serviceMonitor:
        metricRelabelings:
          - action: replace
            sourceLabels: ["node"]
            targetLabel: instance
    kube-state-metrics:
      metricLabelsAllowlist: ["persistentvolumeclaims=[*]"]
      prometheus:
        monitor:
          enabled: true
          relabelings:
            - action: replace
              regex: (.*)
              replacement: $1
              sourceLabels: ["__meta_kubernetes_pod_node_name"]
              targetLabel: kubernetes_node
    kubeApiServer:
      enabled: true
    prometheus:
      ingress:
        enabled: true
        annotations:
          kubernetes.io/tls-acme: "true"
          kubernetes.io/ingress.class: contour
          cert-manager.io/cluster-issuer: letsencrypt-prod
          ingress.kubernetes.io/force-ssl-redirect: "true"
          projectcontour.io/websocket-routes: "/"
        hosts:
          - &hostp prometheus.${SECRET_PUBLIC_DOMAIN}
        paths:
          - /
        tls:
          - secretName: prometheus-tls
            hosts:
              - *hostp
      thanos:
        image: quay.io/thanos/thanos:v0.30.2@sha256:6b97f63c716781c487da88750850cf5a4e0a1c23af32764e97faefc1383432b1
        objectStorageConfig:
          name: thanos-objstore-secret
          key: objstore.yml
        # renovate: datasource=docker depName=quay.io/thanos/thanos
        version: "v0.30.2"
      walCompression: true
      thanosService:
        enabled: true
      thanosServiceMonitor:
        enabled: true
      prometheusSpec:
        replicas: 3
        replicaExternalLabelName: __replica__ # must match with thanos value `.query.replicaLabel[0]`
        # Breaks any metric that has an existing "cluster" label on a metric
        # externalLabels:
        #   cluster: home # must match with thanos value `.ruler.clusterName`
        thanos:
          image: quay.io/thanos/thanos:v0.30.2
          # renovate: datasource=docker depName=quay.io/thanos/thanos
          version: "v0.30.2"
        podAntiAffinity: hard
        ruleSelectorNilUsesHelmValues: false
        podMonitorSelectorNilUsesHelmValues: false
        serviceMonitorSelectorNilUsesHelmValues: false
        probeSelectorNilUsesHelmValues: false
        retention: 2d
        retentionSize: 6GB
        enableAdminAPI: true
        walCompression: true
        storageSpec:
          volumeClaimTemplate:
            spec:
              storageClassName: ceph-block
              resources:
                requests:
                  storage: 20Gi
        resources:
          requests:
            cpu: 150m
            memory: 2000Mi
          limits:
            memory: 7000Mi
    grafana:
      forceDeployDashboards: true
      sidecar:
        dashboards:
          multicluster:
            etcd:
              enabled: true
      grafana.ini:
        server:
          root_url: https://grafana.${SECRET_PUBLIC_DOMAIN}
        auth:
          disable_login_form: true
          oauth_auto_login: true
          disable_signout_menu: true
        auth.basic:
          enabled: false
        auth.generic_oauth:
          enabled: true
          name: authentik
          client_id: "${SECRET_AUTHENTIK_GRAFANA_CLIENT_ID}"
          client_secret: "${SECRET_AUTHENTIK_GRAFANA_CLIENT_SECRET}"
          scopes: openid email profile
          auth_url: https://auth.${SECRET_PUBLIC_DOMAIN}/application/o/authorize/
          token_url: http://authentik.home.svc.cluster.local/application/o/token/
          api_url: http://authentik.home.svc.cluster.local/application/o/userinfo/
          role_attribute_path: contains(groups[*], 'authentik Admins') && 'Admin' || contains(groups[*], 'authentik Editor') && 'Editor' || 'Viewer'
      datasources:
        datasources.yaml:
          apiVersion: 1
          deleteDatasources:
            - name: Thanos
              orgId: 1
            - name: Prometheus
              orgId: 1
            - name: Alertmanager
              orgId: 1
            - name: Loki
              orgId: 1
          datasources:
            - name: Thanos
              type: prometheus
              isDefault: true
              access: proxy
              url: http://thanos-query.monitoring.svc.cluster.local:9090
            - name: Prometheus
              type: prometheus
              access: proxy
              url: http://kube-prometheus-stack-prometheus.monitoring.svc.cluster.local:9090
            - name: Alertmanager
              type: alertmanager
              access: proxy
              url: http://kube-prometheus-stack-alertmanager.monitoring.svc.cluster.local:9093
              jsonData:
                implementation: prometheus
            - name: Loki
              type: loki
              access: proxy
              url: http://loki-gateway.monitoring.svc.cluster.local:80
      plugins:
        - grafana-piechart-panel
        - grafana-worldmap-panel
        - grafana-clock-panel
      serviceMonitor:
        enabled: true
      imageRenderer:
        enabled: true
        replicas: 2
        networkPolicy:
          limitIngress: false
        serviceMonitor:
          enabled: true
      ingress:
        enabled: true
        annotations:
          kubernetes.io/tls-acme: "true"
          kubernetes.io/ingress.class: contour
          cert-manager.io/cluster-issuer: letsencrypt-prod
          ingress.kubernetes.io/force-ssl-redirect: "true"
          projectcontour.io/websocket-routes: "/"
        hosts:
          - &hostg grafana.${SECRET_PUBLIC_DOMAIN}
        paths:
          - /
        tls:
          - secretName: grafana-tls
            hosts:
              - *hostg
